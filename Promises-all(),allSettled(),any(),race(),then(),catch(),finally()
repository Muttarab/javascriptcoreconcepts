//Promises in Javascript
//Topics
//Promise.all()
//Promise.allSettled()
//Promise.any()
//Promise.race()
//Promise.then()
//Promise.catch()
//Promise.finally()






//Promise.all() in Javascript
//The Promise.all() method returns a single promise that resolves when all the input promises have been resolved
//If one of the input promise rejects, the Promise.all() method immediately returns a promise that rejects with an error of the first rejected promise
//resolved promises example in promise.all()
const a1 = new Promise((resolve, reject) => {
  setTimeout(() => {
    console.log('The first promise has resolved');
    resolve(10);
  }, 1 * 1000);
});
const a2 = new Promise((resolve, reject) => {
  setTimeout(() => {
    console.log('The second promise has resolved');
    resolve(20);
  }, 2 * 1000);
});
const a3 = new Promise((resolve, reject) => {
  setTimeout(() => {
    console.log('The third promise has resolved');
    resolve(30);
  }, 3 * 1000);
});

Promise.all([a1, a2, a3]).then((results) => {
  const total = results.reduce((p, c) => p + c);

  console.log(`Results: ${results}`);
  console.log(`Total: ${total}`);
});

//OUTPUT:
//The first promise has resolved
//The second promise has resolved
//The third promise has resolved
//Results: 10,20,30
//Total: 60


//rejected promises example in promise.all()
const b1 = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log('The first promise has resolved');
        resolve(10);
    }, 1 * 1000);

});
const b2 = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log('The second promise has rejected');
        reject('Failed');
    }, 2 * 1000);
});
const b3 = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log('The third promise has resolved');
        resolve(30);
    }, 3 * 1000);
});


Promise.all([b1, b2, b3])
    .then(console.log) // this will never execute
    .catch(console.log); // this will execute
    
//OUTPUT:
//The first promise has resolved
//The second promise has rejected
//Failed
//The third promise has resolved


//Promise.all()
const promise1 = Promise.resolve(3);
const promise2 = 42;
const promise3 = new Promise((resolve, reject) => {
  setTimeout(resolve, 100, 'foo');
});

Promise.all([promise1, promise2, promise3]).then((values) => {
  console.log(values);
});
//OUTPUT: Array [3, 42, "foo"]

//Promise.allSettled()
const promise1 = Promise.resolve(3);
const promise2 = new Promise((resolve, reject) => setTimeout(reject, 100, 'foo'));
const promises = [promise1, promise2];

Promise.allSettled(promises).
  then((results) => results.forEach((result) => console.log(result.status)));

// OUTPUT:
// "fulfilled"
// "rejected"

//Promise.any()
const promise1 = Promise.reject(0);
const promise2 = new Promise((resolve) => setTimeout(resolve, 100, 'quick'));
const promise3 = new Promise((resolve) => setTimeout(resolve, 500, 'slow'));

const promises = [promise1, promise2, promise3];

Promise.any(promises).then((value) => console.log(value));

// OUTPUT: "quick"


// Promise.race()
const promise1 = new Promise((resolve, reject) => {
  setTimeout(resolve, 500, 'one');
});

const promise2 = new Promise((resolve, reject) => {
  setTimeout(resolve, 100, 'two');
});

Promise.race([promise1, promise2]).then((value) => {
  console.log(value);
  // Both resolve, but promise2 is faster
});
// OUTPUT: "two"


//Promise.then() (two scenarios(resolve,reason))
//reason example
const promise1 = new Promise((resolve, reject) => {
  reject('Error!');
});

promise1.then((value) => {
  console.log(value);
}, reason => {
  console.log(reason)
});
//OUTPUT: Error!

//resolve example
const promise1 = new Promise((resolve, reject) => {
  resolve('Success!');
});

promise1.then((value) => {
  console.log(value);
}, reason => {
  console.log(reason)
});
//OUTPUT: Success!


//Promise.catch()
const promise1 = new Promise((resolve, reject) => {
  reject('Uh-oh!');
});

promise1.catch((error) => {
  console.error(error);
});
// OUTPUT: Uh-oh!


//Promise.finally()
function checkMail() {
  return new Promise((resolve, reject) => {
    if (Math.random() > 0.5) {
      resolve('Mail has arrived');
    } else {
      reject(new Error('Failed to arrive'));
    }
  });
}

checkMail()
  .then((mail) => {
    console.log(mail);
  })
  .catch((err) => {
    console.error(err);
  })
  .finally(() => {
    console.log('Experiment completed');
  });
//OUTPUT1
  Error: Failed to arrive
 "Experiment completed"
//OUTPUT2
 "Mail has arrived"
 "Experiment completed"
  









